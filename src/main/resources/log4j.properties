###################      log4j有三个重要组件:日志信息的优先级,信息的输出目的地,输出的格式.
### 设置日志级别  ###      优先级从高到低有FATAL ERROR WARN INFO DEBUG TRACE ALL
###################      log4j只建议使用四个级别:ERROR WARN INFO DEBUG
# 第一个为主要级别 定义后低于其优先级的都不能输出.
log4j.rootLogger=DEBUG,stdout,warn,error,info,debug


### 输出到控制台 ###

##  输出源Appender  log4j允许日志请求被输出到多个输出源
# Appender包括console(控制台)  ConsoleAppender,log信息将输出到Console,效果等同于System.out
# files(文件),  FileAppender,log信息将输出到指定文件中.配置时指定log输出的文件名.推荐DailyRollingAppender
# GUI components(图形的组件),
# remote socket servers(socket 服务),
# JMS(java信息服务),
# NT Event Loggers(NT的事件日志),
# remote UNIX Syslog daemons(远程UNIX的后台日志服务)
# 它也可以做到异步记录.
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
# layout配置
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
# org.apache.log4j.HTMLLayout(以HTML表格形式布局),
# org.apache.log4j.PatternLayout(可以灵活地指定布局模式),
# org.apache.log4j.SimpleLayout(包含日志信息的级别和信息字符串),
# org.apache.log4j.TTCCLayout(包含日志产生的时间、线程、类别等等信息).
#
# PatternLayout自定义格式:
# %m 输出代码中指定的消息
# %p 输出优先级,即...DEBUG,INFO,WARN,ERROR...
# %r 输出自应用启动到输出该log信息耗费的毫秒数
# %c 输出所属的类目,通常就是所在类的全名
# %t 输出产生该日志事件的线程名
# %n 输出一个回车换行符,Windows平台为"rn",Unix平台为"n"
# %d 输出日志时间点的日期或时间,默认格式为ISO8601,也可以在其后指定格式,比如:%d{yyy MMM dd HH:mm:ss,SSS}
#      输出类似:2002年10月18日 22:10:28,921
# %l 输出日志事件的发生位置,包括类目名、发生的线程,以及在代码中的行数.如：Testlog4.main(Test Log4.java:10)
log4j.appender.stdout.layout.ConversionPattern=[%c] %5p - %m %d{yyyy-MM-dd HH:mm:ss}%n


### 输出到文件 ###
#log4j.appender.warn=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.warn.File=${catalina.base}/logs/ssm_warn.log
#log4j.appender.warn.DatePattern='.'yyyy-MM-dd
#log4j.appender.warn.Append=true
## 定义输出WARN级别以上的文件
#log4j.appender.warn.Threshold=WARN
#log4j.appender.warn.layout=org.apache.log4j.PatternLayout
#log4j.appender.warn.layout.ConversionPattern=[%c] %5p -%m%n %d{yyyy-MM-dd HH:mm:ss} - %l%n
#
#log4j.appender.error = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.error.File = ${catalina.home}/logs/error.log
### ${catalina.base}/logs/error.log 多实例但是公安装目录时使用
#log4j.appender.error.Append = true
#log4j.appender.error.Threshold = ERROR
#log4j.appender.error.DatePattern='.'yyyy-MM-dd
#log4j.appender.error.layout = org.apache.log4j.PatternLayout
#log4j.appender.error.layout.ConversionPattern =%d %p[%c:%L] - %m%n